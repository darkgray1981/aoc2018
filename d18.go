package main

import (
	"fmt"
	"strings"
	"time"
)

func main() {

	fmt.Println("Starting...")
	p1()
	p2()
	p2alt()
}

func p1() {

	t := time.Now()

	old := load(INPUT)
	fresh := freshBoard(old)

	for mins := 0; mins < 10; mins++ {

		for y, row := range old {
			for x, c := range row {
				acre := countCell(x, y, old)

				if c == '.' && acre.Tree >= 3 {
					c = '|'
				} else if c == '|' && acre.Lumberyard >= 3 {
					c = '#'
				} else if c == '#' && (acre.Lumberyard < 1 || acre.Tree < 1) {
					c = '.'
				}

				fresh[y][x] = c
			}
		}

		old, fresh = fresh, old
	}

	// draw(old)

	result := countAll(old)

	fmt.Println("Done:", result.Tree, result.Lumberyard, result.Tree*result.Lumberyard, time.Since(t))
}

func p2() {

	t := time.Now()

	target := 1000000000

	seen := make(map[string]int)
	found := false

	old := load(INPUT)
	fresh := freshBoard(old)

	for mins := 0; mins < target; mins++ {

		for y, row := range old {
			for x, c := range row {
				acre := countCell(x, y, old)

				if c == '.' && acre.Tree >= 3 {
					c = '|'
				} else if c == '|' && acre.Lumberyard >= 3 {
					c = '#'
				} else if c == '#' && (acre.Lumberyard < 1 || acre.Tree < 1) {
					c = '.'
				}

				fresh[y][x] = c
			}
		}

		old, fresh = fresh, old

		if !found {
			hash := stringify(old)
			if m, ok := seen[hash]; ok {
				diff := mins - m
				fmt.Println("Loop length:", diff, mins)
				found = true
				mins = (target-mins)/diff*diff + mins
			} else {
				seen[hash] = mins
			}
		}
	}

	// draw(old)

	result := countAll(old)

	fmt.Println("Done 2:", result.Tree, result.Lumberyard, result.Tree*result.Lumberyard, time.Since(t))
}

func p2alt() {

	t := time.Now()

	target := 1000000000

	seen := make(map[string]int)

	old := load(INPUT)
	fresh := freshBoard(old)

	var result Count

outer:
	for mins := 0; mins < target; mins++ {

		for y, row := range old {
			for x, c := range row {
				acre := countCell(x, y, old)

				if c == '.' && acre.Tree >= 3 {
					c = '|'
				} else if c == '|' && acre.Lumberyard >= 3 {
					c = '#'
				} else if c == '#' && (acre.Lumberyard < 1 || acre.Tree < 1) {
					c = '.'
				}

				fresh[y][x] = c
			}
		}

		old, fresh = fresh, old

		if mins > 500 {
			hash := stringify(old)
			if m, ok := seen[hash]; ok {
				diff := mins - m
				fmt.Println("Loop length:", diff, mins)
				mins = m + (target-mins-1)%diff
				for k, v := range seen {
					if v == mins {
						result = countSpecial(k)
						break outer
					}
				}
			} else {
				seen[hash] = mins
			}
		}
	}

	// draw(old)

	fmt.Println("Done 2a:", result.Tree, result.Lumberyard, result.Tree*result.Lumberyard, time.Since(t))
}

func countSpecial(s string) Count {
	var result Count

	for _, c := range s {
		switch c {
		case '.':
			result.Open++
		case '|':
			result.Tree++
		case '#':
			result.Lumberyard++
		}
	}

	return result
}

type Count struct {
	Open       int
	Tree       int
	Lumberyard int
}

func countCell(x, y int, board [][]byte) Count {

	var result Count

	ys := max(y-1, 0)
	ye := min(y+2, len(board))

	xs := max(x-1, 0)
	xe := min(x+2, len(board[0]))

	for i := ys; i < ye; i++ {
		for j := xs; j < xe; j++ {
			if j == x && i == y {
				continue
			}

			c := board[i][j]
			if c == '.' {
				result.Open++
			} else if c == '|' {
				result.Tree++
			} else if c == '#' {
				result.Lumberyard++
			}
		}
	}

	return result
}

func countAll(board [][]byte) Count {

	var result Count

	for _, row := range board {
		for _, c := range row {
			switch c {
			case '.':
				result.Open++
			case '|':
				result.Tree++
			case '#':
				result.Lumberyard++
			}
		}
	}

	return result
}

func stringify(board [][]byte) string {

	b := make([]byte, len(board)*len(board[0]))

	for i, row := range board {
		copy(b[i*len(row):], row)
	}

	return string(b)
}

func freshBoard(board [][]byte) [][]byte {
	fresh := make([][]byte, len(board))

	for i, row := range board {

		fresh[i] = make([]byte, len(row))
	}

	return fresh
}

func draw(board [][]byte) {

	for _, row := range board {
		fmt.Println(string(row))
	}

}

func load(input string) [][]byte {

	var board [][]byte

	for _, s := range strings.Split(input, "\n") {
		if len(s) == 0 {
			continue
		}

		row := make([]byte, len(s))

		for i, c := range s {
			row[i] = byte(c)
		}

		board = append(board, row)
	}

	return board
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

const INPUT1 = `.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.`

const INPUT = `#||.....|......|##.#.#|....|#.#|#.|....#|#||#.....
...#|#..#..#|.#...#|..|....##....|.#.|.#.......#..
|#.|#...|...|.##.|..#.#.....##.........##|..|.|...
...#..|....|.....#.............|..|.....|...|...#.
..|#..||..|####.#|#...##..|#|||#.#.###...#....#...
..|....||.#..|#|||..##.#.|#.||...|..#|..|.#....#..
#||..|..|#.|.###..........||.|.|..#.#..#||........
.|||#..#.|....#......##....#...#.|...#|.||.....#..
#.||.|#..|#.#.|#|....|.##|..#.....#.|#|..|.||#..#.
#|........|.#.....#....|#.|.|.##..#.|#.|.|...|....
|.|..#.#.##|.|#..#.#.#.|#||#|.#.#....#..|..#..|...
..#..||#|#...|#||...|#|.|.#..##.#.#....#.....||.#.
#..|||#...|..|#||.|#.....|.|##.........|||..#...|#
...|....#..|....|.||..|#....##..#....|.#|..#....|.
#.###|.|#|.##..|...|..|...||.......#|##.#|.||#|..#
|....|.#.|.#......|...#|||..||#.##..#.....#|..#.#.
..#|#...##....##..|.|.|#.|.||....|...#..|#.|...|..
|......|..|.#.....#...|........|.....#|#.#.|#.#.|.
||.|#..#.###..|.#.......||.#.#...#.#.|#....#|....#
#.|..|#..#||.....#..||.||.|##|#..#|.....#.#..###..
|.|#|.#.|..|||.|....#....####||.|.|##..|.|..||##|.
.....##...#..|#.|||..|..|..#||.#..#...|.|.####|#..
..|.#...|...#....#|..|.||.#...|##..|.#...#..||....
|.#|....|....|....|....|#..##..#....#|..||..||....
#..|.#.||..|..##.|...##...|...|#..|.||...#|.|....#
|....#||.##|.|#..#|.#..|...||..|.||..|...|.......#
##....|..#|||..|...#...#...|#..#|.|.#..||.#.#.#...
|#....||.#.#||.|#|.#.||..###.|.|.....#|...#.#...#.
.|.#|#.|......#.#..............#....|..||..||#||..
##.|...|...#.#|#|.#|.|.###...#..#..|..##|#|.||....
....#|#..#....|.|...|....||...##.....|.|.|.|.#||.|
.|#||||...#.#..##..##|||........##...#...|..#.|...
|.|.#|||.||..##..#|.......#.#|##..|.......|##.##..
...#.|#..#...|.|#.|...|#.#.#..|....||....#|...|..|
###|.#..#..#..####.#....###....#.#.#.|.|||...|#..#
##...#...#..#.....#|#|.|....||#..||||#..#.#.#...||
...#..|.|...##..|...|#........||.|.|.|..#....#|.#|
.........###|.....|#.|......|.......|.##.|...|...|
..........#.|..#..#.|....##.||....#|.##....|....||
..|#|.....|#...#..###||.##...#...#......|..#..|.#.
|...|..|||.||...|.#|....#|.|...|...#.|..|..||.#|#.
...#||...##.##.|...#....|...||..|..|..#..|.#..#||#
.|.||.#|..|.|##......#.......##....|#.#|.|.#.#..|.
..#..|..|..#...#.#..#|#|#|||...|......#.##...|....
.##..||.##|..|..|.|#.....|.|#..|....|#..|...#...|.
..|.|.|||.||..|..#.|..#.....|##|.|..|..###..#....|
|#...#.#|.#..|..#..|##.##||.||#.....|..#....#.|###
#..|..........##..|#.|..#.|.###.|..|.....|#|.#....
#.....#|#...|..|..|.|....##......|||..|.|...|.....
|..|...#.#.|....|......#|...##......|.##|.....|.#.`

const INPUT_TAEL = `.|#..|#.|.#.#..|.#..##......#...#..#...|.#.#|.|..#
.|||.##.#|#..|#.|#.|.............|.....|.....|#||.
|...#.||.#.|.|#.#....##..||#...#|..|#...##...|#...
...|.##|...|.||...##.#.##.|...#.|#..|..........#.#
#..#....#.#.|....#...#|#....|.###........|#.....#.
#.##.#..#|##.|||.|..|.|#.....|#.....|||||.#.#.|#..
..|....#|...#...#|##...#...|.|...#.#.||.|.|..#.|#.
..##.|..||...|.#..#.|.#..|..#.###.#....###........
#.....#|.....#.|#....#.|.||||.##..||.#.|.#|.....#|
....##...#.......#..|..#||...#||#.|.|.||..#.|||##.
###.##..||..###.#..#.#.|.....#.|#..#.#|...|#..|.#.
...#|###|||.||...#.||..##..|#|...||#....#...||.#..
|..####..#.....|..#..||.#.....##|....||..|......#|
|##...|.#......#||#|......#|#.|#....|..#||....|.||
...#..||#.||..#|.###|.#.|...|...|##|...##....|.||#
.||.|####.#|..|#.....|..#.#.|#.....|.|...##..|....
|.#.........#|....|....#||........#.#.....#....|||
...|#|..#|...|.|..#.##|#..|......#.....|.||..#||#|
.#.....||.#..##.|....#...|.|.#...|.#...|#|..|#|#..
.#.#|.|#.#.|.#.#.||.....|#..|.##|#.##..#|..|#|.|..
....#......|.....##.......##....|#.........#.....|
.......|.......#|...#.|#|.#||...#|..|..||.#...|...
#|..#|....|..||.||..|..##|#..##..#|.#.#.#|.|...|#.
..#.|#.#..|#..#.|.....#|.#..#...#|....|.|.....|...
.#.##|......#.......|#||.|.....#..#.#...|##.#....|
...##..#..#.||..|.|#..#.#.....#......|.|..|.....|.
.|##..|.|..#||....|....|..#.....|..#...#...#|#||#.
...#|#.....#..|.|.|...|##...||###....||...#......#
.#|..#..........|.#......|...#..|#|..#.|#|......|.
#..#.......||#|..##.#.|...#.|.|||#.....#..|......#
....|..|#..#..#.......#..|...#.#.|#.#.#.##||....|.
#|#|#.|..|..|.#...|..#.|||......#.........|#.|..||
|..||.|..|....#.|..#...#..#.|..##...#||..|........
.##..#||..|||.##|###|...###...|...##|......|.|.#..
#..##..#....|..|..||.#|.|.#.|.....|.||..|#.|||.##.
....#|...|...|.|#....##.#.|.#......##..|.|..#.|#..
#||..||#..###||....|..|.|...#..#...|.#..###..|#.|.
.#||.|#..##|#|......|.....#|#|......#..||##|.##..|
.#|.|..|..###|.#|....||...|...||.||...|...##..||..
||#........#..##.....|.|#......|...#..|.##..#...|.
.#.#|........||...|#.||.#|.|...|#.#..|....|.|..#..
.|.|||||....|.#|...###..|...||.||..........#|...##
#||..#...#.#.##|#.|..##..#|#....#.|.|#|....#|.|##|
|..|........|.#..........#|..##....|.#|.#.#.|#...|
.#.##|..##.#..#...|..#||#.|.#...#|...|#.#..|#..|.|
.|.|.#..|#...#.|....#.#......#..|.....|#..........
|.#...|#...|........#....#.|.#.#....#....|..|..##.
.|....#.#........|..|..|##....###..#..#..#..|#....
.|#..#....##...#.....#|##....|##........|.#.#|..|.
|.|#.|.#||#....||.#|...#...#.|##......#.|...|..#|#`
